import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Animated,
  TextInput,
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';
import { LinearGradient } from 'expo-linear-gradient';
import { designTokens } from '../../constants/DesignTokens';
import { analytics } from '../../lib/analytics';
import { useAuth } from '../../contexts/AuthContext';
import { supabase } from '../../lib/supabase';
import { stripeService } from '../../lib/stripe';

interface HouseholdSetupScreenProps {
  navigation: any;
}

export default function HouseholdSetupScreen({ navigation }: HouseholdSetupScreenProps) {
  const [selectedOption, setSelectedOption] = useState<'create' | 'join' | null>(null);
  const [householdName, setHouseholdName] = useState('');
  const [inviteCode, setInviteCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isPremium, setIsPremium] = useState(false);
  
  const { user } = useAuth();
  const fadeInOpacity = useRef(new Animated.Value(0)).current;
  const slideUpTransform = useRef(new Animated.Value(50)).current;
  const enterTime = useRef(Date.now()).current;

  useEffect(() => {
    // Track screen view
    analytics.track('onboarding_household_setup_viewed', {
      timestamp: Date.now(),
      screen: 'household_setup'
    });

    startAnimations();
    checkPremiumStatus();
  }, []);

  const startAnimations = () => {
    Animated.parallel([
      Animated.timing(fadeInOpacity, {
        toValue: 1,
        duration: 600,
        useNativeDriver: true,
      }),
      Animated.timing(slideUpTransform, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start();
  };

  const checkPremiumStatus = async () => {
    try {
      const status = await stripeService.getSubscriptionStatus();
      setIsPremium(status.isActive);
    } catch (error) {
      console.error('Error checking premium status:', error);
      setIsPremium(false);
    }
  };

  const handleCreateHousehold = async () => {
    if (!householdName.trim()) {
      Alert.alert('Name Required', 'Please enter a name for your household.');
      return;
    }

    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    setIsLoading(true);

    try {
      analytics.track('onboarding_household_creation_attempted', {
        timestamp: Date.now(),
        screen: 'household_setup',
        household_name: householdName.trim()
      });

      // Set max_members based on premium status
      const maxMembers = isPremium ? 20 : 5;
      
      // Create household (invite_code will be auto-generated by database trigger)
      const { data: household, error: householdError } = await supabase
        .from('households')
        .insert([{
          name: householdName.trim(),
          created_by: user?.id,
          max_members: maxMembers,
        }])
        .select()
        .single();

      if (householdError) {
        console.error('Error creating household:', householdError);
        throw new Error('Failed to create household');
      }

      // Add creator as owner
      const { error: memberError } = await supabase
        .from('household_members')
        .insert([{
          household_id: household.id,
          user_id: user?.id,
          role: 'owner',
        }]);

      if (memberError) {
        console.error('Error adding creator as member:', memberError);
        throw new Error('Failed to set up household membership');
      }

      analytics.track('onboarding_household_creation_success', {
        timestamp: Date.now(),
        screen: 'household_setup',
        household_id: household.id,
        household_name: household.name,
        max_members: maxMembers
      });

      console.log('🏠 ✅ Household created successfully:', household.name);
      
      // Store household choice for later use
      await storeHouseholdChoice('created', household.id);
      
      navigation.navigate('Permissions');

    } catch (error: any) {
      console.error('Household creation failed:', error);
      
      analytics.track('onboarding_household_creation_failed', {
        timestamp: Date.now(),
        screen: 'household_setup',
        error: error?.message || 'Unknown error'
      });

      Alert.alert(
        'Creation Failed',
        error?.message || 'Failed to create household. Please try again.'
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleJoinHousehold = async () => {
    if (!inviteCode.trim()) {
      Alert.alert('Invite Code Required', 'Please enter the invite code.');
      return;
    }

    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    setIsLoading(true);

    try {
      analytics.track('onboarding_household_join_attempted', {
        timestamp: Date.now(),
        screen: 'household_setup',
        invite_code: inviteCode.trim()
      });

      // Find household by invite code
      const { data: household, error: householdError } = await supabase
        .from('households')
        .select('*')
        .eq('invite_code', inviteCode.trim().toUpperCase())
        .single();

      if (householdError || !household) {
        throw new Error('Invalid invite code. Please check and try again.');
      }

      // Check if household is full
      const { data: members, error: membersError } = await supabase
        .from('household_members')
        .select('user_id')
        .eq('household_id', household.id);

      if (membersError) {
        throw new Error('Failed to check household capacity');
      }

      if (members && members.length >= household.max_members) {
        throw new Error('This household is full. Please contact the owner to increase capacity.');
      }

      // Check if user is already a member
      const { data: existingMember } = await supabase
        .from('household_members')
        .select('*')
        .eq('household_id', household.id)
        .eq('user_id', user?.id)
        .single();

      if (existingMember) {
        throw new Error('You are already a member of this household.');
      }

      // Add user as member
      const { error: joinError } = await supabase
        .from('household_members')
        .insert([{
          household_id: household.id,
          user_id: user?.id,
          role: 'member',
        }]);

      if (joinError) {
        console.error('Error joining household:', joinError);
        throw new Error('Failed to join household');
      }

      analytics.track('onboarding_household_join_success', {
        timestamp: Date.now(),
        screen: 'household_setup',
        household_id: household.id,
        household_name: household.name
      });

      console.log('🏠 ✅ Successfully joined household:', household.name);
      
      // Store household choice for later use
      await storeHouseholdChoice('joined', household.id);
      
      Alert.alert(
        'Welcome!',
        `You've successfully joined "${household.name}". You can now start sharing your kitchen!`,
        [{ text: 'Continue', onPress: () => navigation.navigate('Permissions') }]
      );

    } catch (error: any) {
      console.error('Household join failed:', error);
      
      analytics.track('onboarding_household_join_failed', {
        timestamp: Date.now(),
        screen: 'household_setup',
        error: error?.message || 'Unknown error'
      });

      Alert.alert(
        'Join Failed',
        error?.message || 'Failed to join household. Please try again.'
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleSkip = async () => {
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    
    const timeSpent = Date.now() - enterTime;
    analytics.track('onboarding_household_setup_skipped', {
      timestamp: Date.now(),
      screen: 'household_setup',
      time_spent_seconds: Math.round(timeSpent / 1000)
    });

    // Store that user skipped for default household creation
    await storeHouseholdChoice('skipped');
    
    navigation.navigate('Permissions');
  };

  const handleBack = async () => {
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    
    analytics.track('onboarding_household_setup_back_pressed', {
      timestamp: Date.now(),
      screen: 'household_setup'
    });

    navigation.goBack();
  };

  // Store user's household choice for later processing
  const storeHouseholdChoice = async (choice: 'created' | 'joined' | 'skipped', householdId?: string) => {
    try {
      const choiceData = {
        choice,
        household_id: householdId || null,
        timestamp: Date.now()
      };
      
      // Store in user metadata for retrieval in HouseholdContext
      const { error } = await supabase.auth.updateUser({
        data: {
          ...user?.user_metadata,
          onboarding_household_choice: choiceData
        }
      });

      if (error) {
        console.log('⚠️ Failed to store household choice in metadata:', error);
      } else {
        console.log('✅ Stored household choice:', choiceData);
      }
    } catch (error) {
      console.error('Error storing household choice:', error);
    }
  };

  const renderOptionButton = (
    option: 'create' | 'join',
    title: string,
    description: string,
    icon: keyof typeof Ionicons.glyphMap,
    color: string
  ) => (
    <TouchableOpacity
      style={[
        styles.optionButton,
        selectedOption === option && styles.selectedOption,
        { borderColor: selectedOption === option ? color : designTokens.colors.gray[200] }
      ]}
      onPress={() => {
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        setSelectedOption(option);
      }}
      activeOpacity={0.8}
    >
      <View style={[styles.optionIcon, { backgroundColor: `${color}15` }]}>
        <Ionicons name={icon} size={32} color={color} />
      </View>
      <View style={styles.optionContent}>
        <Text style={[styles.optionTitle, { color: designTokens.colors.deepCharcoal }]}>
          {title}
        </Text>
        <Text style={[styles.optionDescription, { color: designTokens.colors.gray[600] }]}>
          {description}
        </Text>
      </View>
      {selectedOption === option && (
        <View style={[styles.selectedIndicator, { backgroundColor: color }]}>
          <Ionicons name="checkmark" size={16} color={designTokens.colors.pureWhite} />
        </View>
      )}
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      {/* Header - Back button disabled during onboarding flow */}
      <View style={styles.header}>
        {/* Back button intentionally removed - users must complete onboarding flow */}
      </View>

      <KeyboardAvoidingView 
        style={styles.keyboardContainer}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}
      >
        <Animated.ScrollView
          style={[
            styles.content,
            {
              opacity: fadeInOpacity,
              transform: [{ translateY: slideUpTransform }],
            },
          ]}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="handled"
        >
          {/* Header Section */}
          <View style={styles.headerSection}>
            <Text style={styles.mainTitle}>Set Up Your Kitchen</Text>
            <Text style={styles.subtitle}>
              Create a household or join an existing one to start sharing your kitchen
            </Text>
          </View>

          {/* Options */}
          <View style={styles.optionsSection}>
            {renderOptionButton(
              'create',
              'Create New Household',
              `Start your own kitchen with up to ${isPremium ? '20' : '5'} members`,
              'home',
              designTokens.colors.heroGreen
            )}

            {renderOptionButton(
              'join',
              'Join Existing Household',
              'Enter an invite code to join a family or shared kitchen',
              'people',
              designTokens.colors.ocean
            )}
          </View>

          {/* Form Section */}
          {selectedOption && (
            <Animated.View style={styles.formSection}>
              {selectedOption === 'create' && (
                <View style={styles.inputContainer}>
                  <Text style={styles.inputLabel}>Household Name *</Text>
                  <View style={styles.inputWrapper}>
                    <Ionicons 
                      name="home" 
                      size={20} 
                      color={designTokens.colors.gray[500]} 
                      style={styles.inputIcon}
                    />
                    <TextInput
                      style={styles.textInput}
                      placeholder="e.g., The Smith Family, Apartment 4B"
                      placeholderTextColor={designTokens.colors.gray[400]}
                      value={householdName}
                      onChangeText={setHouseholdName}
                      editable={!isLoading}
                      maxLength={50}
                    />
                  </View>
                  <Text style={styles.inputHint}>
                    {isPremium 
                      ? '✨ Premium: Up to 20 members in your household' 
                      : '🆓 Free: Up to 5 members in your household'
                    }
                  </Text>
                </View>
              )}

              {selectedOption === 'join' && (
                <View style={styles.inputContainer}>
                  <Text style={styles.inputLabel}>Invite Code *</Text>
                  <View style={styles.inputWrapper}>
                    <Ionicons 
                      name="key" 
                      size={20} 
                      color={designTokens.colors.gray[500]} 
                      style={styles.inputIcon}
                    />
                    <TextInput
                      style={styles.textInput}
                      placeholder="Enter the invite code"
                      placeholderTextColor={designTokens.colors.gray[400]}
                      value={inviteCode}
                      onChangeText={(text) => setInviteCode(text.toUpperCase())}
                      editable={!isLoading}
                      autoCapitalize="characters"
                      maxLength={8}
                    />
                  </View>
                  <Text style={styles.inputHint}>
                    Ask the household owner for the invite code
                  </Text>
                </View>
              )}

              {/* Action Button */}
              <TouchableOpacity
                style={[styles.actionButton, { opacity: isLoading ? 0.7 : 1 }]}
                onPress={selectedOption === 'create' ? handleCreateHousehold : handleJoinHousehold}
                disabled={isLoading}
                activeOpacity={0.9}
              >
                <LinearGradient
                  colors={[
                    selectedOption === 'create' ? designTokens.colors.heroGreen : designTokens.colors.ocean,
                    selectedOption === 'create' ? designTokens.colors.green[600] : designTokens.colors.primary[600]
                  ]}
                  style={styles.buttonGradient}
                >
                  {isLoading ? (
                    <Text style={styles.buttonText}>
                      {selectedOption === 'create' ? 'Creating...' : 'Joining...'}
                    </Text>
                  ) : (
                    <>
                      <Text style={styles.buttonText}>
                        {selectedOption === 'create' ? 'Create Household' : 'Join Household'}
                      </Text>
                      <Ionicons
                        name="arrow-forward"
                        size={20}
                        color={designTokens.colors.pureWhite}
                      />
                    </>
                  )}
                </LinearGradient>
              </TouchableOpacity>
            </Animated.View>
          )}

          {/* Skip Option */}
          <TouchableOpacity
            style={styles.skipButton}
            onPress={handleSkip}
            disabled={isLoading}
          >
            <Text style={styles.skipText}>Skip - I'll set this up later</Text>
          </TouchableOpacity>

          {/* Info Text */}
          <Text style={styles.infoText}>
            Don't worry, you can always create or join households later in settings
          </Text>
        </Animated.ScrollView>
      </KeyboardAvoidingView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: designTokens.colors.pureWhite,
  },
  header: {
    paddingTop: 50,
    paddingHorizontal: 20,
    paddingBottom: 10,
    zIndex: 10,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: designTokens.colors.gray[100],
    justifyContent: 'center',
    alignItems: 'center',
  },
  keyboardContainer: {
    flex: 1,
  },
  content: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 24,
    paddingBottom: 40,
    flexGrow: 1,
  },
  headerSection: {
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 40,
  },
  mainTitle: {
    fontSize: 32,
    fontWeight: '700',
    color: designTokens.colors.deepCharcoal,
    fontFamily: 'Poppins',
    textAlign: 'center',
    marginBottom: 12,
    lineHeight: 40,
  },
  subtitle: {
    fontSize: 18,
    color: designTokens.colors.gray[600],
    fontFamily: 'Inter',
    textAlign: 'center',
    lineHeight: 26,
    paddingHorizontal: 8,
  },
  optionsSection: {
    marginBottom: 32,
    gap: 16,
  },
  optionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: designTokens.colors.pureWhite,
    borderRadius: 16,
    padding: 20,
    borderWidth: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.08,
    shadowRadius: 8,
    elevation: 3,
    position: 'relative',
  },
  selectedOption: {
    backgroundColor: designTokens.colors.gray[50],
  },
  optionIcon: {
    width: 64,
    height: 64,
    borderRadius: 32,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  optionContent: {
    flex: 1,
  },
  optionTitle: {
    fontSize: 18,
    fontWeight: '600',
    fontFamily: 'Inter',
    marginBottom: 4,
  },
  optionDescription: {
    fontSize: 14,
    fontFamily: 'Inter',
    lineHeight: 20,
  },
  selectedIndicator: {
    position: 'absolute',
    top: 12,
    right: 12,
    width: 24,
    height: 24,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },
  formSection: {
    marginBottom: 32,
  },
  inputContainer: {
    marginBottom: 24,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: designTokens.colors.deepCharcoal,
    fontFamily: 'Inter',
    marginBottom: 8,
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: designTokens.colors.gray[50],
    borderRadius: 12,
    borderWidth: 1,
    borderColor: designTokens.colors.gray[200],
    paddingHorizontal: 16,
    paddingVertical: 14,
    minHeight: 52,
  },
  inputIcon: {
    marginRight: 12,
  },
  textInput: {
    flex: 1,
    fontSize: 16,
    fontFamily: 'Inter',
    color: designTokens.colors.deepCharcoal,
  },
  inputHint: {
    fontSize: 14,
    color: designTokens.colors.gray[500],
    fontFamily: 'Inter',
    marginTop: 6,
    lineHeight: 20,
  },
  actionButton: {
    borderRadius: 30,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 4,
  },
  buttonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 18,
    paddingHorizontal: 32,
    minHeight: 56,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: '600',
    color: designTokens.colors.pureWhite,
    fontFamily: 'Inter',
    marginRight: 8,
  },
  skipButton: {
    alignItems: 'center',
    paddingVertical: 16,
    marginBottom: 16,
  },
  skipText: {
    fontSize: 16,
    color: designTokens.colors.gray[600],
    fontFamily: 'Inter',
    textDecorationLine: 'underline',
  },
  infoText: {
    fontSize: 14,
    color: designTokens.colors.gray[500],
    fontFamily: 'Inter',
    textAlign: 'center',
    lineHeight: 20,
    paddingHorizontal: 16,
  },
}); 